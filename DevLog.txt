07/19/2021 6:10 PM
Created a basic ASP.NET MVC project.

07/19/2021 6:20 PM
Added Runtime Razor pages
	- seached and installed Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation v3 package
	- in ConfigureServices() of Startup.cs added: services.AddControllersWithViews().AddRazorRuntimeCompilation();
	Now we can see live changes to the view when refreshing.

07/19/2021 6:30 PM
Added Razor pages
	- in ConfigureServices() of Startup.cs added:
		services.AddRazorPages(); // under services.AddControllersWithViews();
	- in Configure() of Startup.cs added:
		app.UseAuthentication(); // above app.UseAuthorization();
		and in app.UseEndpoints( enpoints => { ... }
			endpoints.MapRazorPages(); // as the last item
	Now we can use razor pages with the urls all mapped.

07/19/2021 7:30 PM
added ASP.NET Core Identity (Account Managment) 
	in ~/Views/Shared
		create _IdentityLayout.cshtml
	add a Scaffolded Item of type Identity
		select the Layout just made
		select any pages to customize
		create a new Data Context and User classes
	in ~/Areas/Identity/Data/BugTracketUser.cs
		created custom properties, added schema annotations, and data annotations (for validation):
			[PersonalData]
			[Column(TypeName ="VARCHAR(20)")]
			[MaxLength(20)]
			public string FirstName { get; set; }
			[PersonalData]
			[Column(TypeName = "VARCHAR(20)")]
			[MaxLength(20)]
			public string LastName { get; set; }
	in ConnectionStrings of ~/appsetting.json change: Database=BugTracker to Database=BugTrackerDevDB
	in Package Manager Console: 
		Add-Migration "CreateIdentitySchema"
		Update-Database
	Now we can take advantage of the built-in Account system for regestering new users as well as login in current ones.

07/19/2021 7:40 PM
run my database script to create my tables.
	right click on BugTrackerDevDB and select New Query
	copy paste code from MyDatabasev2.sql (only the create portion)

07/19/2021 7:45 PM
Added Dapper
	in Package Manager Console:
		Install-Package Dapper
		Install-Package Dapper.Contrib
	Now we can use the database framework, Dapper, to write SQL command to get the data (yay I get to do the fun stuff)

07/19/2021 7:56 PM
-Create a DbHelper in order to comunicate with the DB
	in ~/Helpers
		create DbHelper.cs
		add this method:
			public static SqlConnection GetConnection() {
				return new SqlConnection(@"connection string you're using here");
	Now we can use this helper class to write query commands (SQL).


07/20/2021 2:19 PM
in ~/Controllers/HomeController.cs 
	added [Authorize] above the class
	Now we need to sign in to access the HomeController

07/21/2021 9:19 AM
Created BTUserModel & ProjectModel
Properties based on schema
	Now we can begin making the regestration make a BTUser as well as the register account.

07/21/2021 9:36 AM
Added Spur Admin Template

07/21/2021 9:49 AM
Changed Login.cshtml, Register.cshtml, and IdentityLayout to work with spur

07/21/2021 11:04 AM
Made the regestration make you enter a username
	Changed the input model in Register.cshtml Added:
		[Required]
        [DataType(DataType.Text)]
        [Display(Name = "Username")]
        public string UserName { get; set; }
	Added a Username feild in view
	Now a Usernameis mandated at registration

07/21/2021 12:08 PM
struggle
	problem: connecting to the DB 
	cause: turns out that method Insert<T> from Dapper.Contrib affects "Ts" table
	solution: my solution was to rename my model BTUser and the table BTUsers
struggle
	problem: The admin property on BTUsers was referenceing a user with the id of -1 (doesn't exist)
	cause: Dapper.Contrib's Insert<T> is too abstracted
	solution: map it myself using Dapper's Execute() (this was easier than I thought)
	Now in the registration process has the BTUsers Table updated with ASP Identity


07/22/2021 2:00 PM
struggle
	problem: How to create roles
	cause: documentation says it depends
	solution: manage roles in the application

07/22/2021 3:43 PM
Made a view for Managing Roles

07/22/2021 8:39 PM
Created the viewmodel and Controller for Roles

07/23/2021 12:28 PM
Git is now used for version control

07/24/2021 5:30 PM
Created a role assignment view

07/24/2021 6:04 PM
Used tag helpers to create a dropdown select
	made BTUserRoles enum

07/24/2021 7:23 PM
Made an update role button that works

07/24/2021 9:55 PM
discovered Microsoft.AspNetCore.Identity.AspNetRoleManager too late :^(

07/25/2021 2:16 PM
In IdentityHostingStartup.cs
	added .AddRoles<IdentityRole>() so that I could use the role stuff in userManager
In Resgister.cshtml
	Discovered and fixed a security issue (sql injection)
	used the userManager to add new user to 'NoRole' role by default.
	Tested Role Based Authorization; it works :^) 

07/25/2021 2:47 PM
In RoleController.cs
	Changed queries to parameterized queries for security
	Made myDB and the IdentityDB in sync
	Role Based Authorization is ready to be used

07/25/2021 5:12 PM
Used spur to make things look nice.

07/26/2021 4:28 PM
Made Manage projects view.

07/26/2021 5:14 PM
CRUD operation for project implemented.

07/26/2021 7:04 PM
Can now view users assigned to a certain project by clicking on a project's name

07/27/2021 1:41 PM
Project assignment functionality is complete

07/27/2021 5:50 PM
Can now view Bug Tickets

07/29/2021 4:12 PM
Made a TicketReadable model to convert enums and ids to their proper names.
Used some of that for projects model.
Humans can now read the data clearly.


07/29/2021 9:18 PM
Ticket Create & Read working properly

07/31/2021 8:26 PM
Ticket Update/Edit and History functionality working.
Create Ticket for design looks nicer.

07/31/2021 9:03 PM
History back button works correctly.
BugTicket/Details/(?id) process user input before using it.

08/04/2021 1:16 PM
Tickets can now be closed.

08/05/2021 5:01 PM
Closed Ticket functionality complete.
Can now delete tickets.

08/05/2021 6:10 PM
comment model made

08/06/2021 10:51 AM
Ticket and Project Ids are now generated on the server.
	In order to reduce gaps between Ids.

08/06/2021 1:55 PM
Comments can now be made below a ticket.

08/06/2021 3:02 PM
Comment CRUD operations complete.

08/07/2021 12:48 PM
RoleConroller code cleaned.
Started making SqlHelper.
	To make queries more readable.

08/07/2021 1:22 PM
RoleConroller has empty string validation for role titles.
	Couldn't use model validation since it's not my model.

08/07/2021 4:25 PM
Model Validations only seem to work if you pass just that model.
I'm using ViewModels so the built in validation is not applicable.
I'm just going to use control statements.

08/08/2021 1:39 PM
ProjectController.cs cleaned up
	added validations for user input
	except for hidden forms (will rely on [ValidateAntiForgeryToken] )

08/09/2021 2:06 PM
BugTicketController.cs cleaned up with validations added.

08/09/2021 2:10 PM
BugTicketController.cs renamed to TicketController.cs
BugTicketViewModels renamed to TicketViewModels

08/10/2021 4:19 PM
Rest of the controllers are now cleaned up and have server-side verification.

08/10/2021 6:31 PM
Authorization added to all the controllers.
The application is ready for deployment.




TODO
Allow ManageSpecific to be accesible via a drop down with a list of the avalible projects.

use https://www.datatables.net/ for nice DB tables

Add validations to login and show errors on a failed login (pw or un was bad)
Add validations to create project

create a cronjob or something to make Ticket Status change from New to InProgress after 24hrs


